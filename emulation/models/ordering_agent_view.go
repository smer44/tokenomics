// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OrderingAgentView Ordering agent view
// Example: {"incoming":{"order-1":{"capacity-1":110,"capacity-2":350},"order-2":{"capacity-3":55}},"producers":{"capacity-1":{"producer-1":{"capacity":120,"degradation":5,"id":"producer-1","maxCapacity":150,"requestedCapacity":500,"restoration":20,"restorationRunning":"false","upgrade":10,"upgradeRunning":"true"}}}}
//
// swagger:model OrderingAgentView
type OrderingAgentView struct {

	// incoming
	Incoming map[string]map[string]int64 `json:"incoming,omitempty"`

	// producers
	Producers map[string]map[string]ProducingAgentInfo `json:"producers,omitempty"`
}

// Validate validates this ordering agent view
func (m *OrderingAgentView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProducers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderingAgentView) validateProducers(formats strfmt.Registry) error {
	if swag.IsZero(m.Producers) { // not required
		return nil
	}

	for k := range m.Producers {

		for kk := range m.Producers[k] {

			if err := validate.Required("producers"+"."+k+"."+kk, "body", m.Producers[k][kk]); err != nil {
				return err
			}
			if val, ok := m.Producers[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					if ve, ok := err.(*errors.Validation); ok {
						return ve.ValidateName("producers" + "." + k + "." + kk)
					} else if ce, ok := err.(*errors.CompositeError); ok {
						return ce.ValidateName("producers" + "." + k + "." + kk)
					}
					return err
				}
			}

		}

	}

	return nil
}

// ContextValidate validate this ordering agent view based on the context it is used
func (m *OrderingAgentView) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProducers(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OrderingAgentView) contextValidateProducers(ctx context.Context, formats strfmt.Registry) error {

	for k := range m.Producers {

		for kk := range m.Producers[k] {

			if val, ok := m.Producers[k][kk]; ok {
				if err := val.ContextValidate(ctx, formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OrderingAgentView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OrderingAgentView) UnmarshalBinary(b []byte) error {
	var res OrderingAgentView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
