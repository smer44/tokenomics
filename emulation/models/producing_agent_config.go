// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProducingAgentConfig producing agent config
//
// swagger:model ProducingAgentConfig
type ProducingAgentConfig struct {

	// Initial capacity
	// Required: true
	Capacity *int64 `json:"capacity"`

	// Degradation rate
	// Required: true
	Degradation *int64 `json:"degradation"`

	// Producer identifier
	// Required: true
	ID *string `json:"id"`

	// restoration
	Restoration Restoration `json:"restoration,omitempty"`

	// Capacity type
	// Required: true
	Type *string `json:"type"`

	// upgrade
	Upgrade *Upgrade `json:"upgrade,omitempty"`
}

// Validate validates this producing agent config
func (m *ProducingAgentConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCapacity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDegradation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpgrade(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProducingAgentConfig) validateCapacity(formats strfmt.Registry) error {

	if err := validate.Required("capacity", "body", m.Capacity); err != nil {
		return err
	}

	return nil
}

func (m *ProducingAgentConfig) validateDegradation(formats strfmt.Registry) error {

	if err := validate.Required("degradation", "body", m.Degradation); err != nil {
		return err
	}

	return nil
}

func (m *ProducingAgentConfig) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *ProducingAgentConfig) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *ProducingAgentConfig) validateUpgrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Upgrade) { // not required
		return nil
	}

	if m.Upgrade != nil {
		if err := m.Upgrade.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this producing agent config based on the context it is used
func (m *ProducingAgentConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateUpgrade(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProducingAgentConfig) contextValidateUpgrade(ctx context.Context, formats strfmt.Registry) error {

	if m.Upgrade != nil {

		if swag.IsZero(m.Upgrade) { // not required
			return nil
		}

		if err := m.Upgrade.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("upgrade")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("upgrade")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProducingAgentConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProducingAgentConfig) UnmarshalBinary(b []byte) error {
	var res ProducingAgentConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
