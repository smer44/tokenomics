// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendProducingAgentCommandHandlerFunc turns a function with the right signature into a send producing agent command handler
type SendProducingAgentCommandHandlerFunc func(SendProducingAgentCommandParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendProducingAgentCommandHandlerFunc) Handle(params SendProducingAgentCommandParams) middleware.Responder {
	return fn(params)
}

// SendProducingAgentCommandHandler interface for that can handle valid send producing agent command params
type SendProducingAgentCommandHandler interface {
	Handle(SendProducingAgentCommandParams) middleware.Responder
}

// NewSendProducingAgentCommand creates a new http.Handler for the send producing agent command operation
func NewSendProducingAgentCommand(ctx *middleware.Context, handler SendProducingAgentCommandHandler) *SendProducingAgentCommand {
	return &SendProducingAgentCommand{Context: ctx, Handler: handler}
}

/*
	SendProducingAgentCommand swagger:route POST /producing-agents/{id} sendProducingAgentCommand

# Submit Producing Agent Command

Send a command to a producing agent.
*/
type SendProducingAgentCommand struct {
	Context *middleware.Context
	Handler SendProducingAgentCommandHandler
}

func (o *SendProducingAgentCommand) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSendProducingAgentCommandParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
