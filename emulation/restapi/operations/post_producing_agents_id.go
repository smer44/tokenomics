// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// PostProducingAgentsIDHandlerFunc turns a function with the right signature into a post producing agents ID handler
type PostProducingAgentsIDHandlerFunc func(PostProducingAgentsIDParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostProducingAgentsIDHandlerFunc) Handle(params PostProducingAgentsIDParams) middleware.Responder {
	return fn(params)
}

// PostProducingAgentsIDHandler interface for that can handle valid post producing agents ID params
type PostProducingAgentsIDHandler interface {
	Handle(PostProducingAgentsIDParams) middleware.Responder
}

// NewPostProducingAgentsID creates a new http.Handler for the post producing agents ID operation
func NewPostProducingAgentsID(ctx *middleware.Context, handler PostProducingAgentsIDHandler) *PostProducingAgentsID {
	return &PostProducingAgentsID{Context: ctx, Handler: handler}
}

/*
	PostProducingAgentsID swagger:route POST /producing-agents/{id} postProducingAgentsId

# Submit Producing Agent Command

Send a command to a producing agent.
*/
type PostProducingAgentsID struct {
	Context *middleware.Context
	Handler PostProducingAgentsIDHandler
}

func (o *PostProducingAgentsID) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostProducingAgentsIDParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
