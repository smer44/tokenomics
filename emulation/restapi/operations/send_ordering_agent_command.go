// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SendOrderingAgentCommandHandlerFunc turns a function with the right signature into a send ordering agent command handler
type SendOrderingAgentCommandHandlerFunc func(SendOrderingAgentCommandParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SendOrderingAgentCommandHandlerFunc) Handle(params SendOrderingAgentCommandParams) middleware.Responder {
	return fn(params)
}

// SendOrderingAgentCommandHandler interface for that can handle valid send ordering agent command params
type SendOrderingAgentCommandHandler interface {
	Handle(SendOrderingAgentCommandParams) middleware.Responder
}

// NewSendOrderingAgentCommand creates a new http.Handler for the send ordering agent command operation
func NewSendOrderingAgentCommand(ctx *middleware.Context, handler SendOrderingAgentCommandHandler) *SendOrderingAgentCommand {
	return &SendOrderingAgentCommand{Context: ctx, Handler: handler}
}

/*
	SendOrderingAgentCommand swagger:route POST /ordering-agents/{id} sendOrderingAgentCommand

# Submit Ordering Agent Command

Send a command to an ordering agent.
*/
type SendOrderingAgentCommand struct {
	Context *middleware.Context
	Handler SendOrderingAgentCommandHandler
}

func (o *SendOrderingAgentCommand) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSendOrderingAgentCommandParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
